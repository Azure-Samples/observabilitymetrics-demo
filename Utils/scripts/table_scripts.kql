//create raw tables
.create-merge table Aksservernode_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Cosmosdb_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Firewall_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Keyvault_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Loadbalancer_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Storage_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Eventhubs_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Cognitive_Svc_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Cognitive_Svc_Usage_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Cognitive_Svc_Latency_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Cognitive_Svc_RateLimit_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Container_Registry_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table LogAnalytics_Availability_Raw (metrics: dynamic) with (folder = "Raw")

// Create ingestion mapping
.create-or-alter table Aksservernode_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Cosmosdb_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Firewall_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Keyvault_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Loadbalancer_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Storage_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Eventhubs_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Cognitive_Svc_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Cognitive_Svc_Usage_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Cognitive_Svc_Latency_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Cognitive_Svc_RateLimit_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Container_Registry_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table LogAnalytics_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

//create adx tables
.create-merge table Resource_Providers (name: string, ['type']: string, resultTableName: string)

.create-merge table Subscription_Names (subscriptionId: guid, name: string)

.create-merge table Subscriptions (solution: string, tenancy: string, component: string, subscriptionId: guid, createdAt: datetime)

.create-merge table Subscriptions_Processed (subscriptionId: guid, dateProcessed: datetime)

.create-merge table Aksservernode_Availability (['date']: datetime, ['id']: string, nodeReady: decimal, nodeNotReady: decimal, nodeUnknown: decimal, location: string, subscriptionId: guid, name: string) 

.create-merge table Cosmosdb_Availability (['date']: datetime, name: string, availability: decimal, subscriptionId: guid, location: string, ['id']: string)

.create-merge table Firewall_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Keyvault_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Loadbalancer_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Storage_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Eventhubs_Availability (['date']: datetime, ['id']: string, incomingRequests: decimal, serverErrors: decimal, location: string, subscriptionId: guid, name: string)

.create-merge table Cognitive_Svc_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Cognitive_Svc_Usage (['date']: datetime, ['id']: string, generatedtokens: decimal, processedprompttokens: decimal,inferencetokens: decimal,finetunedtraininghours: decimal,apiname: string, modeldeploymentname: string, featurename: string, subscriptionId: guid, location: string, name: string)

.create-merge table Cognitive_Svc_Latency (['date']: datetime, ['id']: string, latency: decimal, apiname:string, operationname: string,  ratelimitkey: string, subscriptionId: guid, location: string, name: string)

.create-merge table Cognitive_Svc_RateLimit (['date']: datetime, ['id']: string, ratelimit: decimal, ratelimitkey: string, subscriptionId: guid, location: string, name: string)

.create-merge table Container_Registry_Availability (['date']: datetime, ['id']: string, successfulPullCount: decimal, totalPullCount: decimal, successfulPushCount: decimal, totalPushCount: decimal, location: string, subscriptionId: guid, name: string)

.create-merge table LogAnalytics_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

//create functions

.create-or-alter function  Parse_Eventhubs_Availability() {
let requests = Eventhubs_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid) 
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'IncomingRequests' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), incomingrequests = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let errors = Eventhubs_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid) 
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'ServerErrors' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), servererrors = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
(requests | join kind=leftouter errors on $left.timestamp == $right.timestamp and $left.id == $right.id) 
    | project timestamp, id, incomingrequests, servererrors, location, subscriptionId, name
}

.create-or-alter function  Parse_Container_Registry_Availability() {
let successfulPull = Container_Registry_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'SuccessfulPullCount'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), successfulpullcount = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let totalPull = Container_Registry_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'TotalPullCount'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), totalpullcount = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let successfulPush = Container_Registry_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'SuccessfulPushCount'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), successfulpushcount = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let totalPush = Container_Registry_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'TotalPushCount'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), totalpushcount = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
    (successfulPull | join kind = innerunique totalPull on $left.timestamp == $right.timestamp and $left.id == $right.id)
    | join kind = innerunique successfulPush on $left.timestamp == $right.timestamp and $left.id == $right.id
    | join kind = innerunique  totalPush on $left.timestamp == $right.timestamp and $left.id == $right.id
    | project timestamp, id, successfulpullcount, totalpullcount, successfulpushcount, totalpushcount, location, subscriptionId, name
}

.create-or-alter function  Parse_Aksservernode_Availability() {
    let ready = Aksservernode_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid) 
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'kube_node_status_condition' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand metadatavalues = timeseries.metadatavalues 
    | where tostring(metadatavalues.name.value) == 'status2' and tostring(metadatavalues.value) == 'Ready' 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), nodeReady = todecimal(data.average), location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name); 
    let notReady = Aksservernode_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'kube_node_status_condition' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand metadatavalues = timeseries.metadatavalues 
    | where tostring(metadatavalues.name.value) == 'status2' and tostring(metadatavalues.value) == 'NotReady' 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), nodeNotReady = todecimal(data.average), location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name); 
    let unknown = Aksservernode_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'kube_node_status_condition' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand metadatavalues = timeseries.metadatavalues 
    | where tostring(metadatavalues.name.value) == 'status2' and tostring(metadatavalues.value) == 'unknown' 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), nodeUnknown = todecimal(data.average), location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name); 
    (ready | join kind=leftouter notReady on $left.timestamp == $right.timestamp and $left.id == $right.id) 
    | join kind=leftouter unknown on $left.timestamp == $right.timestamp and $left.id == $right.id 
    | project timestamp, id, nodeReady, nodeNotReady, nodeUnknown, location, subscriptionId, name
}

.create-or-alter function  Parse_Cosmosdb_Availability() {
    Cosmosdb_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'ServiceAvailability'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        name = tostring(name),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        id = tostring(id)
}

.create-or-alter function  Parse_Firewall_Availability() {
    Firewall_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'FirewallHealth'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

.create-or-alter function  Parse_Keyvault_Availability() {
    Keyvault_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Availability'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)
}

.create-or-alter function  Parse_Loadbalancer_Availability() {
    Loadbalancer_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'VipAvailability'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

.create-or-alter function  Parse_Storage_Availability() {
    Storage_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Availability'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

.create-or-alter function  Parse_Cognitive_Svc_Availability() {
    Cognitive_Svc_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'SuccessRate'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

.create-or-alter function  Parse_Cognitive_Svc_Usage() {
let apiname1=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'GeneratedTokens'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'apiname'
    | extend apiname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct  timestamp = todatetime(data.timeStamp), id = tostring(id), generatedtokens = todecimal(data.total), apiname = tostring(apiname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let apiname2=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'ProcessedPromptTokens'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'apiname'
    | extend apiname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct  timestamp = todatetime(data.timeStamp), id = tostring(id), processedprompttokens = todecimal(data.total), apiname = tostring(apiname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let modeldeploymentname1=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'GeneratedTokens'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'modeldeploymentname'
    | extend modeldeploymentname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), generatedtokens = todecimal(data.total), modeldeploymentname=tostring(modeldeploymentname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let modeldeploymentname2=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'ProcessedPromptTokens'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'modeldeploymentname'
    | extend modeldeploymentname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), processedprompttokens = todecimal(data.total), modeldeploymentname=tostring(modeldeploymentname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let featurename1=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'GeneratedTokens'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'featurename'
    | extend featurename = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), generatedtokens = todecimal(data.total), featurename=tostring(featurename),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let featurename2=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'ProcessedPromptTokens'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'featurename'
    | extend featurename = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), processedprompttokens = todecimal(data.total), featurename=tostring(featurename),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let apiname3=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'TokenTransaction'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'apiname'
    | extend apiname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct  timestamp = todatetime(data.timeStamp), id = tostring(id), inferencetokens = todecimal(data.total), apiname = tostring(apiname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let modeldeploymentname3=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'TokenTransaction'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'modeldeploymentname'
    | extend modeldeploymentname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), inferencetokens = todecimal(data.total), modeldeploymentname=tostring(modeldeploymentname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let featurename3=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'TokenTransaction'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'featurename'
    | extend featurename = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), inferencetokens = todecimal(data.total), featurename=tostring(featurename),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let apiname4=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'FineTunedTrainingHours'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'apiname'
    | extend apiname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct  timestamp = todatetime(data.timeStamp), id = tostring(id), finetunedtraininghours = todecimal(data.total), apiname = tostring(apiname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let modeldeploymentname4=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'FineTunedTrainingHours'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'modeldeploymentname'
    | extend modeldeploymentname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), finetunedtraininghours = todecimal(data.total), modeldeploymentname=tostring(modeldeploymentname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let featurename4=Cognitive_Svc_Usage_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'FineTunedTrainingHours'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'featurename'
    | extend featurename = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), finetunedtraininghours = todecimal(data.total), featurename=tostring(featurename),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let t1=apiname1
| join kind=leftouter apiname2 on $left.id==$right.id and $left.timestamp==$right.timestamp
| join kind=leftouter apiname3 on $left.id==$right.id and $left.timestamp==$right.timestamp
| join kind=leftouter apiname4 on $left.id==$right.id and $left.timestamp==$right.timestamp;
let t2= modeldeploymentname1
| join kind=leftouter modeldeploymentname2 on $left.id==$right.id and $left.timestamp==$right.timestamp
| join kind=leftouter modeldeploymentname3 on $left.id==$right.id and $left.timestamp==$right.timestamp
| join kind=leftouter modeldeploymentname4 on $left.id==$right.id and $left.timestamp==$right.timestamp;
let t3= featurename1
| join kind=leftouter featurename2 on $left.id==$right.id and $left.timestamp==$right.timestamp
| join kind=leftouter featurename3 on $left.id==$right.id and $left.timestamp==$right.timestamp
| join kind=leftouter featurename4 on $left.id==$right.id and $left.timestamp==$right.timestamp;
t1
| join kind = inner t2 on $left.id==$right.id and $left.timestamp==$right.timestamp
| join kind = inner t3 on $left.id==$right.id and $left.timestamp==$right.timestamp
| distinct  timestamp = timestamp, id = tostring(id), generatedtokens=generatedtokens, processedprompttokens = processedprompttokens, inferencetokens =inferencetokens, finetunedtraininghours=finetunedtraininghours,apiname = tostring(apiname), modeldeploymentname = tostring(modeldeploymentname),featurename=tostring(featurename),
 subscriptionId = subscriptionId, location = location, name = tostring(name)
| where processedprompttokens >0
}

.create-or-alter function  Parse_Cognitive_Svc_Latency() {
let ratelimitkey=Cognitive_Svc_Latency_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Latency'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'ratelimitkey'
    | extend ratelimitkey = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct  timestamp = todatetime(data.timeStamp), id = tostring(id), latency = todecimal(data.average), ratelimitkey = tostring(ratelimitkey),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let region=Cognitive_Svc_Latency_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Latency'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'region'
    | extend region = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), latency = todecimal(data.average), region=tostring(region),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let apiname=Cognitive_Svc_Latency_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Latency'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'apiname'
    | extend apiname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), latency = todecimal(data.average), apiname=tostring(apiname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let operationname=Cognitive_Svc_Latency_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Latency'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'operationname'
    | extend operationname = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), latency = todecimal(data.average), operationname=tostring(operationname),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
(
ratelimitkey
| join kind = leftouter region on $left.timestamp == $right.timestamp and $left.id == $right.id
| join kind = leftouter apiname on $left.timestamp == $right.timestamp and $left.id == $right.id
| join kind = leftouter operationname on $left.timestamp == $right.timestamp and $left.id == $right.id
| where apiname has "Azure OpenAI API"
| distinct  timestamp, id, latency, apiname, operationname, ratelimitkey, subscriptionId, location, name
)
}

.create-or-alter function  Parse_Cognitive_Svc_RateLimit() {
let ratelimitkey=Cognitive_Svc_RateLimit_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Ratelimit'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'RatelimitKey'
    | extend ratelimitkey = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), ratelimit = todecimal(data.total), ratelimitkey = tostring(ratelimitkey),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let region=Cognitive_Svc_RateLimit_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'RateLimit'
    | mv-expand timeseries = value.timeseries
    | mv-expand metadatavalues = timeseries.metadatavalues
    | where metadatavalues.name.value == 'region'
    | extend region = metadatavalues.value
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), ratelimit = todecimal(data.total), region=tostring(region),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
     (ratelimitkey | join kind = leftouter region on $left.timestamp == $right.timestamp and $left.id == $right.id)
    | distinct timestamp, id, ratelimit, ratelimitkey, subscriptionId, location, name
 }

.create-or-alter function  Parse_LogAnalytics_Availability() {
    LogAnalytics_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'AvailabilityRate_Query'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

// Update results table policies
.alter table Aksservernode_Availability policy update @'[{"Source": "Aksservernode_Availability_Raw", "Query": "Parse_Aksservernode_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Cosmosdb_Availability policy update @'[{"Source": "Cosmosdb_Availability_Raw", "Query": "Parse_Cosmosdb_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Firewall_Availability policy update @'[{"Source": "Firewall_Availability_Raw", "Query": "Parse_Firewall_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Keyvault_Availability policy update @'[{"Source": "Keyvault_Availability_Raw", "Query": "Parse_Keyvault_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Loadbalancer_Availability policy update @'[{"Source": "Loadbalancer_Availability_Raw", "Query": "Parse_Loadbalancer_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Storage_Availability policy update @'[{"Source": "Storage_Availability_Raw", "Query": "Parse_Storage_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Eventhubs_Availability policy update @'[{"Source": "Eventhubs_Availability_Raw", "Query": "Parse_Eventhubs_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Cognitive_Svc_Availability policy update @'[{"Source": "Cognitive_Svc_Availability_Raw", "Query": "Parse_Cognitive_Svc_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Cognitive_Svc_Usage policy update @'[{"Source": "Cognitive_Svc_Usage_Raw", "Query": "Parse_Cognitive_Svc_Usage()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Cognitive_Svc_RateLimit policy update @'[{"Source": "Cognitive_Svc_RateLimit_Raw", "Query": "Parse_Cognitive_Svc_RateLimit()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Cognitive_Svc_Latency policy update @'[{"Source": "Cognitive_Svc_Latency_Raw", "Query": "Parse_Cognitive_Svc_Latency()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Container_Registry_Availability policy update @'[{"Source": "Container_Registry_Availability_Raw", "Query": "Parse_Container_Registry_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table LogAnalytics_Availability policy update @'[{"Source": "LogAnalytics_Availability_Raw", "Query": "Parse_LogAnalytics_Availability()", "IsEnabled": "True", "IsTransactional": true}]'


// Adding zero retention policies on Raw tables
.alter-merge table Aksservernode_Availability_Raw policy retention softdelete = 0s

.alter-merge table Cosmosdb_Availability_Raw policy retention softdelete = 0s

.alter-merge table Firewall_Availability_Raw policy retention softdelete = 0s

.alter-merge table Keyvault_Availability_Raw policy retention softdelete = 0s

.alter-merge table Loadbalancer_Availability_Raw policy retention softdelete = 0s

.alter-merge table Storage_Availability_Raw policy retention softdelete = 0s

.alter-merge table Eventhubs_Availability_Raw policy retention softdelete = 0s

.alter-merge table Cognitive_Svc_Availability_Raw policy retention softdelete = 0s

.alter-merge table Cognitive_Svc_Usage_Raw policy retention softdelete = 1000s

.alter-merge table Cognitive_Svc_RateLimit_Raw policy retention softdelete = 1000s

.alter-merge table Cognitive_Svc_Latency_Raw policy retention softdelete = 1000s

.alter-merge table Container_Registry_Availability_Raw policy retention softdelete = 0s

.alter-merge table LogAnalytics_Availability_Raw policy retention softdelete = 0s
