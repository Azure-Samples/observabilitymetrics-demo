.create table Cognitive_Svc_Availability_Raw (metrics: dynamic) with (folder = "Raw")

// Create ingestion mapping
.create table Cognitive_Svc_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

//create adx tables
.create table Resource_Providers (name: string, ['type']: string, resultTableName: string)

.create table Subscription_Names (subscriptionId: guid, name: string)

.create table Subscriptions (solution: string, tenancy: string, component: string, subscriptionId: guid, createdAt: datetime)

.create table Subscriptions_Processed (subscriptionId: guid, dateProcessed: datetime)

.create table Cognitive_Svc_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

//create functions

.create-or-alter function  Parse_Cognitive_Svc_Availability() {
    Cognitive_Svc_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'SuccessRate'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

// Update results table policies
.alter table Cognitive_Svc_Availability policy update @'[{"Source": "Cognitive_Svc_Availability_Raw", "Query": "Parse_Cognitive_Svc_Availability()", "IsEnabled": "True", "IsTransactional": true}]'


// Adding zero retention policies on Raw tables
.alter-merge table Cognitive_Svc_Availability_Raw policy retention softdelete = 1800s
